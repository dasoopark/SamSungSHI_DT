using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MyFirstCSharp
{
    public partial class Chap99_Final_Exam03 : Form
    {
        private int iTotalPrice = 0; // 총 결제 금액  
        private int iCustCash = 100000; // 고객 잔액 금액
        private int ilManCash = 100000; // 관리자 초기 가게 잔액.

        private Dictionary<string, order_FruitInfo> purchase_list = new Dictionary<string, order_FruitInfo>(); //값에, 과일 정보(가격,개수)를 받는 딕셔너리
        private Dictionary<string, order_FruitInfo> cancel_Temp = new Dictionary<string, order_FruitInfo>(); //취소를 하기 위해, 결제 완료 전 정보를 입력받는 딕셔너리
        private Dictionary<string, order_FruitInfo> orderHistory = new Dictionary<string, order_FruitInfo>(); //텍스트 박스에 구매한 것들을 누적시키기 위해 사용하는 딕셔너리


        public Chap99_Final_Exam03()
        {
            InitializeComponent();

        }


        private void btnFruit_Click(object sender, EventArgs e)
        {
            Button btnTemp = (Button)sender;
            string sFruitName = btnTemp.Tag.ToString();
            switch (sFruitName)
            {
                // 결제 시 주문 수량 별 처리를 위하여 주문 버튼 클릭 후 
                case "사과":
                    // 사과의 주문 처리
                    FruitInventoryAdj(lblAppCount, sFruitName, 2000);
                    break;
                case "참외":
                    // 참외의 주문 처리 
                    FruitInventoryAdj(lblMelonCount, sFruitName, 2500);
                    break;
                case "수박":
                    // 수박의 주문 처리
                    FruitInventoryAdj(lblW_MCount, sFruitName, 18000);
                    break;
            }
        }


        void FruitInventoryAdj(Label lblFruitCnt, string sFruitName, int iSalePrice)
        {
            int iFruitCount = 0;
            string _sfruitname = sFruitName;
            // 과일의 현재 재고 수량이 0 일 경우 리턴. 
            iFruitCount = int.Parse(lblFruitCnt.Text);
            if (iFruitCount == 0)
            {
                MessageBox.Show($"{sFruitName}의 재고 수량이 0 입니다. 주문을 할 수 없습니다.");
                return;
            }

            // 던져주는 과일의 재고 개수 1 차감. 
            --iFruitCount;

            lblFruitCnt.Text = Convert.ToString(iFruitCount);

            // 총 누적 구매 금액
            iTotalPrice += iSalePrice;

            // 1.결제하기 - 주문했던 과일의 거래 내역을 수량과 금액으로 과일별로 텍스트박스에 누적하여 표현하기 위해 
            if (orderHistory.ContainsKey(sFruitName))
            {
                orderHistory[sFruitName].Quantity += 1;
                orderHistory[sFruitName].TotalPrice += iSalePrice;
            }
            else
            {
                orderHistory[sFruitName] = new order_FruitInfo { Quantity = 1, TotalPrice = iSalePrice };
            }

            // 결제 취소용 purchase_list에 마지막 결제 완료 품목 저장용
            if (purchase_list.ContainsKey(sFruitName))
            {
                purchase_list[sFruitName].Quantity += 1;
                purchase_list[sFruitName].TotalPrice += iSalePrice;
            }
            else
            {
                purchase_list[sFruitName] = new order_FruitInfo { Quantity = 1, TotalPrice = iSalePrice };
            }

        }



        private void btnTotalPrice_Click(object sender, EventArgs e) //3. 총 결제 금액 보기 클릭
        {
            int totalOrdered = 0;
            foreach (var item in orderHistory)
            {
                totalOrdered += item.Value.TotalPrice; //선택한 과일들의 총 누적 금액
            }


            MessageBox.Show($"총 결재 금액은 {totalOrdered} 원 입니다.");
        }


        private void btnShowTotalMargin_Click(object sender, EventArgs e)
        {
            // 사과 라디오 버튼이 체크 되어있으면
            if (rdoApple.Checked)
            {
                // 사과에 대한 
            }
        }

        private void btnOrderCancle_Click(object sender, EventArgs e) //4. 주문 취소하기 버튼 클릭
        {
            int appcnt = Convert.ToInt32(lblAppCount.Text);
            int chamcnt = Convert.ToInt32(lblMelonCount.Text);
            int wmcnt = Convert.ToInt32(lblW_MCount.Text);

            if (cancel_Temp.Count == 0)
            {
                MessageBox.Show("취소할 내역이 없습니다.");
                return;
            }

            foreach (var fruit in cancel_Temp)
            {
                if (fruit.Key == "사과")
                {
                    appcnt += fruit.Value.Quantity;
                    orderHistory[fruit.Key].Quantity -= fruit.Value.Quantity;
                    orderHistory[fruit.Key].TotalPrice -= fruit.Value.TotalPrice;
                    txtOrderList.AppendText($"\r\n---- 사과 구매 {fruit.Value.Quantity}개 취소 -----\r\n");
                    MessageBox.Show($"사과 {fruit.Value.Quantity}");
                    iCustCash += fruit.Value.TotalPrice;
                    ilManCash -= fruit.Value.TotalPrice;
                }
                if (fruit.Key == "참외")
                {
                    chamcnt += fruit.Value.Quantity;
                    orderHistory[fruit.Key].Quantity -= fruit.Value.Quantity;
                    orderHistory[fruit.Key].TotalPrice -= fruit.Value.TotalPrice;
                    txtOrderList.AppendText($"\r\n---- 참외 구매 {fruit.Value.Quantity}개 취소 -----\r\n");
                    MessageBox.Show($"참외 {fruit.Value.Quantity}");
                    iCustCash += fruit.Value.TotalPrice;
                    ilManCash -= fruit.Value.TotalPrice;
                }
                if (fruit.Key == "수박")
                {
                    wmcnt += fruit.Value.Quantity;
                    orderHistory[fruit.Key].Quantity -= fruit.Value.Quantity;
                    orderHistory[fruit.Key].TotalPrice -= fruit.Value.TotalPrice;
                    txtOrderList.AppendText($"\r\n---- 수박 구매 {fruit.Value.Quantity}개 취소 -----\r\n");
                    MessageBox.Show($"수박 {fruit.Value.Quantity}");
                    iCustCash += fruit.Value.TotalPrice;
                    ilManCash -= fruit.Value.TotalPrice;
                }
            }

            // 취소된 과일 정보를 다시 orderHistory에 저장 
            txtOrderList.AppendText("\r\n---- 결제 취소!! 누적된 거래 내역 -----\r\n");
            foreach (var fruit in orderHistory)
            {
                txtOrderList.AppendText($"{fruit.Key} {fruit.Value.Quantity}개 구매 총 구매 가격: {fruit.Value.TotalPrice}원\r\n");
            }
            txtOrderList.SelectionStart = txtOrderList.Text.Length; //텍스트박스에 누적하여 표현하기 위한 설정 
            txtOrderList.ScrollToCaret();

            lblAppCount.Text = appcnt.ToString();
            lblMelonCount.Text = chamcnt.ToString();
            lblW_MCount.Text = wmcnt.ToString();

            lblCustCash.Text = iCustCash.ToString();
            lblManCash.Text = ilManCash.ToString();

            MessageBox.Show("결제 취소 되었습니다.");
            cancel_Temp.Clear(); // 중복 결제 취소를 막기위해 Clear => Count =0이 됨.

        }



        private void btnBuy_Click(object sender, EventArgs e) //결제 하기
        {
            if (iTotalPrice > iCustCash)
            {
                MessageBox.Show("잔액이 부족합니다. 결제를 할 수 없습니다.");
                return;
            }

            foreach (var fruit in purchase_list)
            {
                if (fruit.Key == "사과")
                {
                    txtOrderList.AppendText($"\r\n---- 사과 구매 : {fruit.Value.Quantity}개  -----\r\n");
                }
                if (fruit.Key == "참외")
                {
                    txtOrderList.AppendText($"\r\n---- 참외 구매 : {fruit.Value.Quantity}개  -----\r\n");
                }
                if (fruit.Key == "수박")
                {
                    txtOrderList.AppendText($"\r\n---- 수박 구매 : {fruit.Value.Quantity}개  -----\r\n");
                }
            }


            txtOrderList.AppendText("\r\n---- 누적된 거래 내역 -----\r\n");
            foreach (var fruit in orderHistory)
            {

                txtOrderList.AppendText($"{fruit.Key} {fruit.Value.Quantity}개 구입 총 구매 가격: {fruit.Value.TotalPrice}원\r\n");
            }
            txtOrderList.SelectionStart = txtOrderList.Text.Length; //텍스트박스에 누적하여 표현하기 위한 설정 
            txtOrderList.ScrollToCaret();


            /*
             foreach (var cancel_fruit in purchase_list) 
            {
                cancel_Temp[cancel_fruit.Key] = cancel_fruit.Value;
            }
            */
            // ★ 제일 시간 많이 끌었던 구문 - 참조 복사 신경 잘 쓰기
            cancel_Temp.Clear();
            foreach (var cancel_fruit in purchase_list)
            {
                var copiedInfo = new order_FruitInfo
                {
                    Quantity = cancel_fruit.Value.Quantity,
                    TotalPrice = cancel_fruit.Value.TotalPrice
                };
                cancel_Temp[cancel_fruit.Key] = copiedInfo;
            }



            iCustCash -= iTotalPrice;
            ilManCash += iTotalPrice;
            iTotalPrice = 0;

            lblCustCash.Text = iCustCash.ToString();
            lblManCash.Text = ilManCash.ToString();
            MessageBox.Show("결제가 완료되었습니다.");

            //결제 완료를 기준으로 새로 품목을 받아야 하므로 , Clear를 통해 비워준다
            purchase_list.Clear();

        }

        private void btnFruitInvoice_Click(object sender, EventArgs e)
        {

        }

        private void BONInvoiceClear_Click(object sender, EventArgs e)
        {

        }

        private void btnShowUnitMargin_Click(object sender, EventArgs e)
        {

        }


        #region <메소드들 정리 >

        private bool checkanyorders()
        {
            // 주문 내역이 있는지 확인합니다.
            return orderHistory.Count > 0;
        }

        private Dictionary<string, int> getlistoffruits()
        {
            // 과일 목록과 가격을 반환합니다.
            return new Dictionary<string, int>
            {
                {"사과", 2000},
                {"참외", 2500},
                {"수박", 18000}
            };
        }

        private double calculateordercost()
        {
            // 주문 비용을 계산합니다.
            double cost = 0;
            foreach (var item in orderHistory)
            {
                cost += item.Value.TotalPrice;
            }
            return cost;
        }

        private void processorder()
        {
            // 주문 처리를 진행합니다.
            MessageBox.Show("발주가 완료되었습니다.");
            ilManCash -= (int)calculateordercost();
            orderHistory.Clear();
        }

        private void resetorderquantities()
        {
            // 주문 수량을 초기화합니다.
            lblAppCount.Text = "0";
            lblMelonCount.Text = "0";
            lblW_MCount.Text = "0";
        }

        private string getselectedfruit()
        {
            // 선택된 과일을 반환합니다.
            if (rdoApple.Checked)
                return "사과";
            else if (rdoMelon.Checked)
                return "참외";
            else if (rdoW_M.Checked)
                return "수박";
            else
                return "";
        }
       private int calculatemargin(string fruit)
          {
          // 특정 과일의 마진 금액을 계산합니다.
             if (purchase_list.ContainsKey(fruit) && orderHistory.ContainsKey(fruit))
             {
                  return orderHistory[fruit].TotalPrice - purchase_list[fruit].TotalPrice;
              }
               return 0;
          }

        private int calculatetotalmargin()
         {
              // 총 마진 금액을 계산합니다.
              int totalmargin = 0;
              var fruits = getlistoffruits();
              foreach (var fruit in fruits.Keys)
              {
                  totalmargin += calculatemargin(fruit);
              }
              return totalmargin;
          }
        }

      
    }
    #endregion
    class order_FruitInfo //과일 구매 개수와, 가격을 누적시켜, 텍스트 박스에 출력하기 위해
                          //// 1.결제하기 - 주문했던 과일의 거래 내역을 수량과 금액으로 과일별로 텍스트박스에 누적하여 표현
    {
        public int Quantity { get; set; }
        public int TotalPrice { get; set; }
    }

}
